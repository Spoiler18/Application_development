@using BlogUI.Models;
@using BlogUI.Services;
@using BlogUI.Enums;

@inject ReactionCommentService reactionCommentService
@inject Common common

<style>
    .dropdown-menu {
        display: none;
        position: absolute;
        background-color: #fff; /* Background color */
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1); /* Box shadow for dropdown */
        z-index: 1000; /* Ensure dropdown appears above other elements */
    }

        .dropdown-menu.show {
            display: block;
        }

    .dropdown:hover .dropdown-menu {
        display: block;
        margin-top: 0;
    }

    .dropup:hover {
        display: block;
        margin-top: 0;
    }

    .active {
        background-color: #fff0a0;
        border-radius: 50%; /* Make the border round */
    }

    .button-div {
        background-color: #fff
    }

        .button-div:hover {
            background-color: #fff0a0;
        }

    .dropdown-item-custom:hover {
        background-color: #fff0a0;
        cursor: pointer;
        border-radius: 50%;
    }

    .btn-secondary.dropdown-toggle::after {
        display: none;
    }

    .x-large {
        font-size: 18px; /* Adjust the font size as needed */
    }

    .custom-color {
        color: #ff5733;
    }

    .black-color {
        color: #000;
    }
</style>

<div class="dropdown" style="width: 50%;">
    <div class="btn button-div btn-secondary dropdown-toggle d-flex justify-content-center" style="border:none;">
        <RadzenIcon Icon="add_reaction" class=@(userReaction > 0 ? "custom-color" : "black-color") @onclick="@(() => ToggleLike(1))" />
        <div class="x-large font-weight-bold">
            @totalReaction.ToString()
        </div>
    </div>
    <!-- Dropdown menu -->
    <div class="dropdown-menu" style="">
        <div class="d-flex">
            <RadzenIcon Icon="thumb_up" class=@(userReaction == (int)Reactions.Like ? "active dropdown-item-custom m-1 p-3" : "dropdown-item-custom m-1 p-3") @onclick="@(() => ToggleLike((int)Reactions.Like))" />
            <RadzenIcon Icon="thumb_down" class=@(userReaction == (int)Reactions.Dislike ? "active dropdown-item-custom m-1 p-3" : "dropdown-item-custom m-1 p-3") @onclick="@(() => ToggleLike((int)Reactions.Dislike))" />
            <RadzenIcon Icon="favorite" class=@(userReaction == (int)Reactions.Love ? "active dropdown-item-custom m-1 p-3" : "dropdown-item-custom m-1 p-3") @onclick="@(() => ToggleLike((int)Reactions.Love))" />
            <RadzenIcon Icon="sentiment_satisfied_alt" class=@(userReaction == (int)Reactions.Happy ? "active dropdown-item-custom m-1 p-3" : "dropdown-item-custom m-1 p-3") @onclick="@(() => ToggleLike((int)Reactions.Happy))" />
            <RadzenIcon Icon="sentiment_very_dissatisfied" class=@(userReaction == (int)Reactions.Sad ? "active dropdown-item-custom m-1 p-3" : "dropdown-item-custom m-1 p-3") @onclick="@(() => ToggleLike((int)Reactions.Sad))" />
        </div>
    </div>
</div>

@code {
    [Parameter] public IEnumerable<DetailedReaction>? blogReactions { get; set; }
    [Parameter] public IEnumerable<DetailedCommentReaction>? commentReactions { get; set; }

    [Parameter] public bool isCommentLikeComponent { get; set; } = false;

    [Parameter] public int blogId { get; set; }
    [Parameter] public EventCallback<string> OnChanged { get; set; }
    [Parameter] public int CommentId { get; set; } = 0;

    private UserContext userContext = new UserContext();
    private int userReaction = 0;
    private int ReactionId = 0;
    private int commentReactionId = 0;
    private int totalReaction = 0;



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            userContext = await common.GetUserContext();
            if(isCommentLikeComponent == true)
            {
                if (commentReactions?.Count() > 0)
                {
                    totalReaction = commentReactions.Count();
                    userReaction = commentReactions.Where(item => item.userId == userContext.userId).Select(item => (int)item.userReaction).FirstOrDefault();
                    commentReactionId = commentReactions.Where(item => item.userId == userContext.userId).Select(item => item.commentReactionId).FirstOrDefault();
                }
            }
            else
            {
                if (blogReactions?.Count() > 0)
                {
                    totalReaction = blogReactions.Count();
                    userReaction = blogReactions.Where(item => item.userId == userContext.userId).Select(item => (int)item.userReaction).FirstOrDefault();
                    ReactionId = blogReactions.Where(item => item.userId == userContext.userId).Select(item => item.reactionId).FirstOrDefault();
                }
            }
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {

    }

    private async Task ToggleLike(int id)
    {
        if(isCommentLikeComponent != true)
        {
            if (userReaction != id)
            {
                userReaction = id;
                await reactionCommentService.AddEditBlogReaction(ReactionId, userReaction, userContext.userId, blogId);
                if (ReactionId == 0)
                {
                    totalReaction += 1;
                }
            }
            else
            {
                reactionCommentService.DeleteBlogReaction(ReactionId);
                userReaction = 0;
                totalReaction -= 1;
            }
        }
        else
        {
            if (userReaction != id)
            {
                userReaction = id;
                await reactionCommentService.AddEditBlogCommentReaction(commentReactionId, userReaction, CommentId, userContext.userId);
                if (commentReactionId == 0)
                {
                    totalReaction += 1;
                }
            }
            else
            {
                reactionCommentService.DeleteBlogCommentReaction(commentReactionId);
                userReaction = 0;
                totalReaction -= 1;
            }
        }
        await OnChanged.InvokeAsync("success");
        StateHasChanged();
    }

    private async Task ToggleLikeForComment(int id)
    {
        
    }
}
