@page "/blogDetail"

@using BlogUI.Services;
@using BlogUI.Models;
@using BlogUI.Enums;

@inject BlogService blogService
@inject NavigationManager NavManager
@inject Common common
@inject ReactionCommentService reactionCommentService

<style>
    .dropdown-menu {
        display: none;
        position: absolute;
        background-color: #fff; /* Background color */
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1); /* Box shadow for dropdown */
        z-index: 1000; /* Ensure dropdown appears above other elements */
    }

        .dropdown-menu.show {
            display: block;
        }

    .dropdown:hover .dropdown-menu {
        display: block;
        margin-top: 0;
    }

    .dropup:hover {
        display: block;
        margin-top: 0;
    }

    .active {
        background-color: #fff0a0;
        border-radius: 50%; /* Make the border round */
    }

    .button-div {
        background-color: #fff
    }

        .button-div:hover {
            background-color: #fff0a0;
        }

    .dropdown-item-custom:hover {
        background-color: #fff0a0;
        cursor: pointer;
        border-radius: 50%;
    }

    .btn-secondary.dropdown-toggle::after {
        display: none;
    }

    .x-large {
        font-size: 18px; /* Adjust the font size as needed */
    }

    .custom-color {
        color: #ff5733;
    }

    .black-color {
        color: #000;
    }
</style>

<div class="container" style="width: 80%; margin 0 auto;">
    @if (blog != null)
    {
        <div class="card mb-3">
            <div class="card-body">
                <h1 class="card-title">@blog.blogTitle</h1>
                <p class="card-text">@blog.blogDescription</p>
            </div>

            @if (userContext.userId > 0)
            {

                <!-- Like and Comment Bar -->
                <div class="card-footer d-flex justify-content-between align-items-center" style="padding: 0px; border-top: 1px solid #dee2e6;">
                    <!-- Like Button with Popover -->
                    <BlogUI.Components.Assets.LikeComponent blogReactions="@blog.blogReactions" blogId="@blog.blogId" OnChanged="@Callback"/>

                    <!-- Vertical line -->
                    <div style="width: 1px; height: 40px; background-color: #ced4da;"></div>

                    <!-- Comment Button with colored background -->
                    <div style="width:50%; padding: 10px; border-radius: 5px;cursor: pointer;" @onclick=@(() => GoToComments()) class="d-flex button-div justify-content-center">
                        <RadzenIcon Icon="chat" style="background-color: transparent; border-color: transparent;" class=@(blog.blogComments?.Count() > 0 ? "black-color" : "black-color") />
                        <div class="x-large font-weight-bold">
                            @blog.blogComments?.Count().ToString()
                        </div>
                    </div>
                </div>
                @if (showCommentSection)
                {
                    <div class="comment-section" style="padding: 0px; border-top: 1px solid #dee2e6;">
                        <!-- Your comment section markup goes here -->
                        <div class="comment d-flex align-items-center p-4">
                            <div class="user-avatar p-4" style="background-color: #ffffa0; border-radius: 50%;">@userContext.firstName.ToString().Substring(0, 1).ToUpper()@userContext.lastName.ToString().Substring(0, 1).ToUpper()</div> <!-- Short name with round background -->
                            <div class="" style="width: 70%; margin: 0 auto;">
                                <input type="text" style="height: 60px;" class="form-control" @bind-value="@commentText" placeholder="Write a comment..." />
                            </div>
                            <RadzenButton Icon="submit" style="width: 10%; height:20px;" Click="AddComment">Submit</RadzenButton>
                        </div>
                        <div>
                            @foreach (var comment in blog.blogComments)
                            {
                                <BlogUI.Components.Assets.CommentComponent comment="@comment" OnChanged="@Callback" />
                            }
                        </div>
                    </div>
                }
            }
        </div>

    }
</div>

@code {
    [Parameter] public Blog? blog { get; set; }
    private UserContext userContext = new UserContext();

    public int? blogId { get; set; }

    private string commentText;
    private bool showCommentSection = false;

    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(NavManager.Uri);
        var userId = System.Web.HttpUtility.ParseQueryString(uri.Query).Get("id");
        int value;
        int.TryParse(userId, out value);

        blogId = Convert.ToInt32(value);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            userContext = await common.GetUserContext();

            await GetBlog();
            
            StateHasChanged();
        }
    }

    private async Task GetBlog()
    {
        blog = await blogService.GetBlogDetail(blogId);
    }

    public async Task Callback(string message)
    {
        if(message == "success")
        {
            await this.GetBlog();
            StateHasChanged();
        }
    }

    private async Task AddComment()
    {
        if (commentText != null)
        {
            await reactionCommentService.AddEditBlogComment(0, commentText, userContext.userId, blog.blogId, 0);
        }
        await GetBlog();
        commentText = string.Empty;
        StateHasChanged();
    }

    private void GoToComments()
    {
        showCommentSection = !showCommentSection;
    }

}
